" Theme

set mouse=a
set visualbell
syntax enable

" Search Highlight
" Move to the first match (ggn), last (GN), next (n) or previous (N) as usual.
set hlsearch
" nnoremap <silent> <Leader>f :TestFile<CR>

" HighLight current line
set cursorline

" Enable relative number
set relativenumber

" ===== altercation/vim-colors-solarized =====
set background=light
colorscheme solarized
let g:airline_theme = "solarized"
" ===== altercation/vim-colors-solarized =====

" ====== hybrid_material ========
" set background=dark
" colorscheme material
" set background=light
" colorscheme hybrid_material
" let g:airline_theme = "hybrid"
"
" if (has("nvim"))
"   "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
"   let $NVIM_TUI_ENABLE_TRUE_COLOR=1
" endif
"
" "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
" "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
" " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
" if (has("termguicolors"))
"   set termguicolors
" endif
" ====== hybrid_material ========

let g:enable_bold_font = 1
let g:enable_italic_font = 1
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1

"clipboard
if has('clipboard')
  if has('unnamedplus')  " When possible use + register for copy-paste
      set clipboard=unnamed,unnamedplus
  else         " On mac and Windows, use * register for copy-paste
      set clipboard=unnamed
  endif
endif

" ALE
" To disable ALE when vim is starting
" If you want to use ALE, you can run ALEToggle
autocmd VimEnter * ALEDisable
nnoremap <silent> <Leader>c :ALEToggle<CR>

" Strip trailing whitespace
" function! <SID>StripTrailingWhitespaces()
" Strip trailing whitespace
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" NerdTree
map <C-n> :NERDTreeToggle<CR>
map <Leader>f :NERDTreeFind<CR>
let g:NERDSpaceDelims = 1
let NERDTreeShowHidden = 1

" vim-jsx
let g:jsx_ext_required = 0

" emmet-vim
let g:user_emmet_settings = {
  \  'javascript.jsx' : {
    \      'extends' : 'jsx',
    \  },
  \}

" asyncrun.vim
" yarn add --dev prettier eslint-config-prettier eslint-plugin-prettier
autocmd BufWritePost *.js AsyncRun -post=checktime ./node_modules/.bin/eslint --fix %

" Deoplete
set cmdheight=2
" Always draw the signcolumn.
set signcolumn=yes
let g:deoplete#enable_at_startup = 1
let g:neosnippet#enable_complete_done = 1
let g:echodoc#enable_at_startup = 1
let g:echodoc#type = 'signature'
" vue: `yarn global add vue-language-server`
let g:LanguageClient_serverCommands = {
    \ 'ruby': ['solargraph', 'stdio'],
    \ 'vue': ['vls']
    \ }
"Add extra filetypes
let g:deoplete#sources#ternjs#filetypes = [
                \ 'jsx',
                \ 'javascript.jsx'
                \ ]
